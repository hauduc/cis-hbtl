---
title: "Variation Across Cohort"
output: html_notebook
---
```{r}
#!/gsc/software/linux-x86_64-centos7/R-4.1.3/lib64/R/bin/R
# R 4.1.3
# x86_64-centos7-linux-gnu
library(plyranges)
library(VariantAnnotation)
library(MutationalPatterns)
library(genomation)
library(Gviz)
library(BSgenome.Hsapiens.UCSC.hg38)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(systemPipeR)
library(biomaRt)
library(LDlinkR)
library(AllelicImbalance)
library(broom)
library(gt)
library(gtsummary)
library(UpSetR)
library(tidyverse)
library(ggdendro)

const_canonical_chromosomes <- str_c("chr", c(1:22, "X"))

vector_marks <- c("H3K4me3", "H3K27ac", "H3K4me1", "H3K9me3", "H3K27me3", "H3K36me3")
vector_celltypes <- c("BC", "LP", "LC", "SC")
vector_individuals <- c("Individual_14_17_LP_DNA",
                        "Individual_14_18_BC__356K_RNA",
                        "Individual_11_18_BC_RNA_DNA",
                        "Individual_22_18_BC_RNA_DNA",
                        "Individual_24_18_BC_RNA_DNA",
                        "Individual_38_18_LC_RNA_DNA",
                        "Individual_30_18_LC_RNA_DNA",
                        "Individual_15_18_LC_RNA_DNA")

vector_individuals_encoded <- c("Individual_1",
                                "Individual_2",
                                "Individual_3",
                                "Individual_4",
                                "Individual_5",
                                "Individual_6",
                                "Individual_7",
                                "Individual_8")
```
## ---
# Dependency: 13_cohort_clustering_v2.Rmd
## ---

1. Define promoters
2. Define promoters occupied by the union of H3K4me3 peaks across the cohort (in BC, LP, LC, and SC)
3. Define the total number and % of promoters occupied by all individuals, 7 individuals, 6 individuals, etc...
4. Compare this variance within each of the different cell types
```{r}
# H3K4me3 & H3K9me3 (essentially the same as before)
roi_promoters <- 
  TxDb.Hsapiens.UCSC.hg38.knownGene %>% 
  promoters() %>% 
  keepSeqlevels(const_canonical_chromosomes, pruning.mode = "coarse") %>% 
  reduce_ranges()

# H3K27ac, H3K4me1, & H3K27me3
download.file("https://ars.els-cdn.com/content/image/1-s2.0-S2211124716314784-mmc6.xlsx", "data/1-s2.0-S2211124716314784-mmc6.xlsx")

roi_breast_normal_enhancers <- 
  readxl::read_excel("data/1-s2.0-S2211124716314784-mmc6.xlsx") %>% 
  makeGRangesFromDataFrame(keep.extra.columns = TRUE, 
                           ignore.strand = TRUE,
                           starts.in.df.are.0based = TRUE,
                           seqinfo = seqinfo(BSgenome.Hsapiens.UCSC.hg38)) %>%
  keepSeqlevels(const_canonical_chromosomes, pruning.mode = "coarse") %>%
  reduce_ranges()

# H3K36me3
roi_cds <- 
  TxDb.Hsapiens.UCSC.hg38.knownGene %>% 
  cds() %>% 
  keepSeqlevels(const_canonical_chromosomes, pruning.mode = "coarse") %>% 
  reduce_ranges()
```

# Function to make cohort ROI data-filled table - fraction overlap strategy
```{r}
make_cohort_roi_table_fraction_overlap <- function(mark, rois, blacklist_regions_gr = blacklist_encode) {
  # Establish tiled regions of interest GRanges
  # Remove blacklisted areas
  rois_filtered <- 
    rois %>% 
    keepSeqlevels(const_canonical_chromosomes, pruning.mode = "coarse") %>%
    filter_by_non_overlaps(blacklist_regions_gr)
  
  # Tile promoter ranges into 150bp tiles
  rois_filtered_tiled <-
    rois_filtered %>% 
    # tile_ranges(width = 150) %>% # Do not tile promoters into even smaller sections. Each tile corresponds to 1 promoter
    plyranges::mutate(tile_id = seq_along(.))
  
  # Create table containing peak overlap fraction in tiles for entire cohort
  for (current_sample in names(list_peak[[mark]])) {
    # Read in bigWig corresponding to current sample being worked on
    current_peaks <- list_peak[[mark]][[current_sample]] %>% keepSeqlevels(const_canonical_chromosomes, pruning.mode = "coarse")
    
    # Do a raw overlap keeping all metadata
    raw_overlap <- join_overlap_intersect(rois_filtered_tiled, current_peaks)
    
    # Create a tibble with tile_id as key and peak intersection width as value
    # For the tile_ids intersecting multiple separate peaks, group by tile_id and sum total tile_id width covered
    raw_overlap_widths <- 
      tibble(tile_id                   = raw_overlap$tile_id,
             peak_intersection_width   = raw_overlap %>% width()) %>% 
      group_by(tile_id) %>% 
      summarize(peak_intersection_width_total = sum(peak_intersection_width))
    
    # Left join peak intersection widths on tile_id of original tiles
    current_peaks_fraction_overlap_column <-
      rois_filtered_tiled %>% 
      as_tibble() %>% 
      left_join(raw_overlap_widths, by = "tile_id") %>% 
      mutate(peak_intersection_width_total = replace_na(peak_intersection_width_total, 0)) %>% # Replace no-hit tiles with 0 overlap width
      mutate(fraction_overlap = peak_intersection_width_total/width) %>% 
      pull(fraction_overlap)
    
    # Add mean pileup depth per tile for current sample to rois_filtered_tiled as a new column
    rois_filtered_tiled <- 
      rois_filtered_tiled %>% 
      plyranges::mutate("{current_sample}" := current_peaks_fraction_overlap_column)
    }
  # Return completed table
  rois_filtered_tiled
}
```

# Create tables containing fraction of overlap of promoters and enhancers
```{r}
# Initialize list - PROMOTERS
rois_populated_fraction_overlap_promoters_all <- list()
# Execute on each mark type
# H3K4me3
rois_populated_fraction_overlap_promoters_all[["H3K4me3"]] <- 
  make_cohort_roi_table_fraction_overlap(mark = "H3K4me3", rois = roi_promoters)
# H3K27ac
rois_populated_fraction_overlap_promoters_all[["H3K27ac"]] <- 
  make_cohort_roi_table_fraction_overlap(mark = "H3K27ac", rois = roi_promoters)
# H3K4me1
rois_populated_fraction_overlap_promoters_all[["H3K4me1"]] <- 
  make_cohort_roi_table_fraction_overlap(mark = "H3K4me1", rois = roi_promoters)
# H3K9me3
rois_populated_fraction_overlap_promoters_all[["H3K9me3"]] <- 
  make_cohort_roi_table_fraction_overlap(mark = "H3K9me3", rois = roi_promoters)
# H3K27me3
rois_populated_fraction_overlap_promoters_all[["H3K27me3"]] <- 
  make_cohort_roi_table_fraction_overlap(mark = "H3K27me3", rois = roi_promoters)
# H3K36me3
rois_populated_fraction_overlap_promoters_all[["H3K36me3"]] <- 
  make_cohort_roi_table_fraction_overlap(mark = "H3K36me3", rois = roi_promoters)

# Initialize list - ENHANCERS
rois_populated_fraction_overlap_enhancers_all <- list()
# Execute on each mark type
# H3K4me3
rois_populated_fraction_overlap_enhancers_all[["H3K4me3"]] <- 
  make_cohort_roi_table_fraction_overlap(mark = "H3K4me3", rois = roi_breast_normal_enhancers)
# H3K27ac
rois_populated_fraction_overlap_enhancers_all[["H3K27ac"]] <- 
  make_cohort_roi_table_fraction_overlap(mark = "H3K27ac", rois = roi_breast_normal_enhancers)
# H3K4me1
rois_populated_fraction_overlap_enhancers_all[["H3K4me1"]] <- 
  make_cohort_roi_table_fraction_overlap(mark = "H3K4me1", rois = roi_breast_normal_enhancers)
# H3K9me3
rois_populated_fraction_overlap_enhancers_all[["H3K9me3"]] <- 
  make_cohort_roi_table_fraction_overlap(mark = "H3K9me3", rois = roi_breast_normal_enhancers)
# H3K27me3
rois_populated_fraction_overlap_enhancers_all[["H3K27me3"]] <- 
  make_cohort_roi_table_fraction_overlap(mark = "H3K27me3", rois = roi_breast_normal_enhancers)
# H3K36me3
rois_populated_fraction_overlap_enhancers_all[["H3K36me3"]] <- 
  make_cohort_roi_table_fraction_overlap(mark = "H3K36me3", rois = roi_breast_normal_enhancers)
```

# Make data maximally long
```{r}
# Initiate tibble
rois_populated_fraction_overlap_long <- tibble()

# Add long-formatted data to tibble
for (mark in vector_marks) {
  
  # Add long version of frame for promoter mark
  current_frame <-
    rois_populated_fraction_overlap_promoters_all[[mark]] %>% 
    as_tibble() %>% 
    select(-width, -strand) %>% 
    mutate(feature_type = "promoter",
           mark = mark,
           .after = tile_id) %>% 
    pivot_longer(cols = Individual_1_BC:hTERT_L2,
                 names_to = "sample",
                 values_to = "fraction_overlap")
  
  # Join to growing table
  rois_populated_fraction_overlap_long <- 
    bind_rows(rois_populated_fraction_overlap_long, 
              current_frame)
  
  # Add long version of frame for enhancer mark
  current_frame <-
    rois_populated_fraction_overlap_enhancers_all[[mark]] %>% 
    as_tibble() %>% 
    select(-width, -strand) %>% 
    mutate(feature_type = "enhancer",
           mark = mark,
           .after = tile_id) %>% 
    pivot_longer(cols = Individual_1_BC:hTERT_L2,
                 names_to = "sample",
                 values_to = "fraction_overlap")
  
  # Join to growing table
  rois_populated_fraction_overlap_long <- 
    bind_rows(rois_populated_fraction_overlap_long, 
              current_frame)
}

# Add in column defining cell type
rois_populated_fraction_overlap_long <- 
  rois_populated_fraction_overlap_long %>% 
  mutate(cell_type = case_when(sample %>% str_detect("_BC$") ~ "BC",
                               sample %>% str_detect("_LP$") ~ "LP",
                               sample %>% str_detect("_LC$") ~ "LC",
                               sample %>% str_detect("_SC$") ~ "SC",
                               sample == "MCF10A"            ~ "Cell line",
                               sample == "hTERT_L9"          ~ "Cell line",
                               sample == "hTERT_L2"          ~ "Cell line"),
         .after = mark)
```

Remove QC-failed samples from rois_populated_fraction_overlap_long
```{r}
qc_fail_samples <- tibble(experiment_code = c("Individual_2_LP_H3K4me1",
                                              "Individual_2_SC_H3K4me1",
                                              "Individual_2_BC_H3K4me3",
                                              "Individual_2_LC_H3K4me3",
                                              "Individual_2_BC_H3K27me3",
                                              "Individual_2_LP_H3K27me3",
                                              "Individual_2_LC_H3K27me3",
                                              "Individual_2_SC_H3K27me3",
                                              "Individual_2_BC_H3K36me3",
                                              "Individual_2_LP_H3K36me3",
                                              "Individual_2_LC_H3K36me3",
                                              "Individual_2_SC_H3K36me3"))

rois_populated_fraction_overlap_long <-
  rois_populated_fraction_overlap_long %>% 
  mutate(experiment_code = str_c(sample, mark, sep = "_"),
         qc_fail = experiment_code %in% qc_fail_samples$experiment_code) %>% 
  filter(qc_fail == FALSE) %>% 
  select(-experiment_code, -qc_fail)
```

Summarize per-region statistics for graphing
```{r}
# Calculate the number of promoters where BCs have > 0.8 fraction_overlap in promoters
rois_populated_fraction_overlap_summarized_stats <- 
  rois_populated_fraction_overlap_long %>%
  group_by(feature_type, tile_id, mark, cell_type) %>% 
  summarize(fraction_overlaps_mean = mean(fraction_overlap), 
            fraction_overlaps_sd   = sd(fraction_overlap),
            fraction_overlaps_rsd  = (fraction_overlaps_sd/fraction_overlaps_mean) * 100,
            fraction_overlaps_all_less_than_0.2_from_mean = all(abs(fraction_overlap - fraction_overlaps_mean) < 0.2),
            fraction_overlaps_all_less_than_0.5_from_mean = all(abs(fraction_overlap - fraction_overlaps_mean) < 0.5),
            fraction_overlaps_all_less_than_0.8_from_mean = all(abs(fraction_overlap - fraction_overlaps_mean) < 0.8)) %>% 
  ungroup()
```

Prep the data for graphing
```{r}
# Plot fraction of differences from mean in relative bars
# Clean data
rois_populated_fraction_overlap_summarized_stats_prepped <-
  rois_populated_fraction_overlap_summarized_stats %>% 
  filter(fraction_overlaps_mean > 0) %>% # ignore the features where none of the cohort has any overlap
  mutate(feature_type = feature_type %>% factor(c("promoter", "enhancer")),
         mark         = mark         %>% factor(vector_marks),
         cell_type    = cell_type    %>% factor(c("BC", "LP", "LC", "SC", "Cell line")),
         fraction_overlaps_all_less_than_0.2_from_mean = 
           case_when(fraction_overlaps_all_less_than_0.2_from_mean == TRUE  ~ "True",
                     fraction_overlaps_all_less_than_0.2_from_mean == FALSE ~ "False") %>% factor(c("True", "False")),
         fraction_overlaps_all_less_than_0.5_from_mean = 
           case_when(fraction_overlaps_all_less_than_0.5_from_mean == TRUE  ~ "True",
                     fraction_overlaps_all_less_than_0.5_from_mean == FALSE ~ "False") %>% factor(c("True", "False")),
         fraction_overlaps_all_less_than_0.8_from_mean = 
           case_when(fraction_overlaps_all_less_than_0.8_from_mean == TRUE  ~ "True",
                     fraction_overlaps_all_less_than_0.8_from_mean == FALSE ~ "False") %>% factor(c("True", "False")))
```

Plot the summarized statistics from above
Relative Standard Deviation (RSD)
```{r}
# Plot relative standard deviations by category
rois_populated_fraction_overlap_summarized_stats_prepped %>% 
  ggplot(aes(x = mark, y = fraction_overlaps_rsd)) +
  facet_grid(rows = vars(feature_type, cell_type)) +
  geom_violin() +
  labs(x = "Mark",
       y = "Relative Standard Deviation of Overlap Fraction") +
  theme_bw()
ggsave("plots/rois_populated_rsds_violin.png",
       units  = "in",
       width  = 10,
       height = 10) # play around with size to get the text to fit better
```

Number of regions with outlier sample (absolute)
```{r}
# Plot fraction of differences from mean in absolute bars
# 0.2
rois_populated_fraction_overlap_summarized_stats_prepped %>% 
  ggplot(aes(x = fraction_overlaps_all_less_than_0.2_from_mean)) +
  facet_grid(rows = vars(feature_type, cell_type),
             cols = vars(mark)) +
  geom_bar() +
  theme_bw()
ggsave("plots/rois_populated_frac_overlap_mean_diff_bar_abs_0.2.png",
       units  = "in",
       width  = 10,
       height = 10)

# 0.5
rois_populated_fraction_overlap_summarized_stats_prepped %>% 
  ggplot(aes(x = fraction_overlaps_all_less_than_0.5_from_mean)) +
  facet_grid(rows = vars(feature_type, cell_type),
             cols = vars(mark)) +
  geom_bar() +
  theme_bw()
ggsave("plots/rois_populated_frac_overlap_mean_diff_bar_abs_0.5.png",
       units  = "in",
       width  = 10,
       height = 10)

# 0.8
rois_populated_fraction_overlap_summarized_stats_prepped %>% 
  ggplot(aes(x = fraction_overlaps_all_less_than_0.8_from_mean)) +
  facet_grid(rows = vars(feature_type, cell_type),
             cols = vars(mark)) +
  geom_bar() +
  theme_bw()
ggsave("plots/rois_populated_frac_overlap_mean_diff_bar_abs_0.8.png",
       units  = "in",
       width  = 10,
       height = 10)
```

Number of regions with outlier sample (relative)
```{r}
# Plot 0.2
rois_populated_fraction_overlap_summarized_stats_prepped %>% 
  ggplot(aes(x = mark, fill = fraction_overlaps_all_less_than_0.2_from_mean)) +
  facet_grid(rows = vars(feature_type, cell_type)) +
  geom_bar(position = "fill", stat = "count") +
  labs(x = "Mark",
       y = element_blank(),
       fill = "Fraction of regions where\npeak coverage from all samples\ndiffers < 20% from mean peak coverage") +
  theme_bw() + 
  scale_fill_manual(values = c("#4db04a", "#e31b1b"))
ggsave("plots/rois_populated_frac_overlap_mean_diff_bar_rel_0.2.png",
       units  = "in",
       width  = 16,
       height = 10)

# Plot 0.5
rois_populated_fraction_overlap_summarized_stats_prepped %>% 
  ggplot(aes(x = mark, fill = fraction_overlaps_all_less_than_0.5_from_mean)) +
  facet_grid(rows = vars(feature_type, cell_type)) +
  geom_bar(position = "fill", stat = "count") +
  labs(x = "Mark",
       y = element_blank(),
       fill = "Fraction of regions where\npeak coverage from all samples\ndiffers < 50% from mean peak coverage") +
  theme_bw() + 
  scale_fill_manual(values = c("#4db04a", "#e31b1b"))
ggsave("plots/rois_populated_frac_overlap_mean_diff_bar_rel_0.5.png",
       units  = "in",
       width  = 16,
       height = 10)

# Plot 0.8
rois_populated_fraction_overlap_summarized_stats_prepped %>% 
  ggplot(aes(x = mark, fill = fraction_overlaps_all_less_than_0.8_from_mean)) +
  facet_grid(rows = vars(feature_type, cell_type)) +
  geom_bar(position = "fill", stat = "count") +
  labs(x = "Mark",
       y = element_blank(),
       fill = "Fraction of regions where\npeak coverage from all samples\ndiffers < 80% from mean peak coverage") +
  theme_bw() + 
  scale_fill_manual(values = c("#4db04a", "#e31b1b"))
ggsave("plots/rois_populated_frac_overlap_mean_diff_bar_rel_0.8.png",
       units  = "in",
       width  = 16,
       height = 10)
```
