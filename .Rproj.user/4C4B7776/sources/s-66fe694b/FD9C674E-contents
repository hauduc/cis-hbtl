---
title: "unique_peak_enrichment"
output: html_notebook
---
```{r}
# R 4.1.3
# x86_64-centos7-linux-gnu
library(plyranges)
library(VariantAnnotation)
library(MutationalPatterns)
library(genomation)
library(Gviz)
library(BSgenome.Hsapiens.UCSC.hg38)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(systemPipeR)
library(biomaRt)
library(LDlinkR)
library(AllelicImbalance)
library(broom)
library(gt)
library(gtsummary)
library(UpSetR)
library(tidyverse)

const_canonical_chromosomes <- str_c("chr", c(1:22, "X", "Y"))

vector_marks <- c("H3K4me3", "H3K4me1", "H3K27ac", "H3K9me3", "H3K27me3", "H3K36me3")
vector_celltypes <- c("BC", "LP", "LC", "SC")
vector_individuals <- c("Individual_14_17_LP_DNA",
                        "Individual_14_18_BC__356K_RNA",
                        "Individual_11_18_BC_RNA_DNA",
                        "Individual_22_18_BC_RNA_DNA",
                        "Individual_24_18_BC_RNA_DNA",
                        "Individual_38_18_LC_RNA_DNA",
                        "Individual_30_18_LC_RNA_DNA",
                        "Individual_15_18_LC_RNA_DNA")


```
Code plan:
1. Select modality - i.e. H3K4me3_BC, for peaks and cis-hBTLs
2. Add Mark, Celltype, and Individual info as metadata columns
3. Merge all peaks together
3.5 Concat all unique cis-hBTLs together
4. Disjoin peaks and add a key column of individuals_involved as TRUE_FALSE_TRUE_... etc...
5. Left join (peaks, cis_hBTLs)
6. mutate new column TRUE/FALSE if key column of each row matches
7. Count up...
  a. Percentage of peak tiles that can be explained by cis-hBTLs
  b. Modalities that can be most explained by cis-hBTLs (i.e. H3K4me3 unique peaks are most determined by cis-hBTLs)
  Can you show that tiles are enriched for compatible cis-hBTLs compared to other variants?
  Show range of enrichments
  Need to figure out the: 1. Number of tiles that can be "explained" by a matching cis-hBTL 2. Pull out top ranked tiles with highest proportion of explanatory cis-hBTLs

Measure:
Compatible cis-hBTLs intersecting each tile type divided by total number of of variants intersecting that tile type
Compare the above ratio with the ratio of modality cis-hBTLs to total variants
Graph this ratio across all modality types and for all mark types and cell types


Main loop
```{r}
# Initialize results data.frame
range_hBTL_enrichment_stats <- data.frame()

for (MARK in vector_marks) {
  for (CELLTYPE in vector_celltypes) {
    
    # Establish modality string
    MODALITY <- str_c(MARK, CELLTYPE, sep = "_")
    
    # Prepare cis-hBTLs
    current_id_ranges_cis_hBTL <- consensus.all.spaas.rpkm.bed %>% 
      plyranges::filter(mark == MARK, celltype == CELLTYPE)
    
    # Prepare peaks
    current_id_ranges_peak <- list_peak_wasp[[MODALITY]] %>% 
      unlist() %>% 
      disjoin_ranges()
    
    # Compare peaks and cis-hBTLs
    current_unique_peak_enrichment <- current_id_ranges_peak %>% 
      plyranges::mutate(overlaps_cis_hBTLs = countOverlaps(., current_id_ranges_cis_hBTL),
                        has_a_cis_hBTL = overlaps_cis_hBTLs > 0)
    
    # Calculate stats and place in stackable dataframe
    current_stats <- data.frame(mark = MARK,
                                
                                celltype = CELLTYPE,
                                
                                frac_of_tile_width_with_cis_hBTL =              sum(width(current_unique_peak_enrichment %>% plyranges::filter(has_a_cis_hBTL == TRUE))) / 
                                                                                sum(width(current_unique_peak_enrichment)),
                                
                                frac_of_tile_width_with_cis_hBTL_per_cis_hBTL = sum(width(current_unique_peak_enrichment %>% plyranges::filter(has_a_cis_hBTL == TRUE))) / 
                                                                                sum(width(current_unique_peak_enrichment)) / 
                                                                                length(current_id_ranges_cis_hBTL),
                                
                                frac_of_tiles_with_cis_hBTL =                 length(current_unique_peak_enrichment %>% plyranges::filter(has_a_cis_hBTL == TRUE)) / 
                                                                                length(current_unique_peak_enrichment),
                                
                                frac_of_tiles_with_cis_hBTL_per_cis_hBTL =    length(current_unique_peak_enrichment %>% plyranges::filter(has_a_cis_hBTL == TRUE)) / 
                                                                                length(current_unique_peak_enrichment) / 
                                                                                length(current_id_ranges_cis_hBTL))
    
    range_hBTL_enrichment_stats <- bind_rows(range_hBTL_enrichment_stats,
                                             current_stats)
    
  }
}

```

Adjust to millions format for easier viewing
```{r}
range_hBTL_enrichment_stats <- range_hBTL_enrichment_stats %>% 
  mutate(frac_of_tile_width_with_cis_hBTL_per_cis_hBTL_million = frac_of_tile_width_with_cis_hBTL_per_cis_hBTL * 1e6,
         frac_of_tiles_with_cis_hBTL_per_cis_hBTL_million      = frac_of_tiles_with_cis_hBTL_per_cis_hBTL      * 1e6)

```

Visualize
```{r}
# Tiles with cis-hBTLs
range_hBTL_enrichment_stats %>%
  filter(frac_of_tiles_with_cis_hBTL != 0) %>% 
  mutate(mark = mark %>% factor(c("H3K36me3", "H3K27me3", "H3K9me3", "H3K4me3", "H3K27ac", "H3K4me1"))) %>% 
  ggplot(aes(x = mark, y = frac_of_tiles_with_cis_hBTL, fill = celltype)) +
  geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.75) +
  labs(x = "mark",
       y = "fraction of tiles\nwith a cis-hBTL",
       fill = "cell type") +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5, hjust = 0),
        aspect.ratio = 3/4)

ggsave("plots/tiles_w_a_cis_hBTL.png")

# Rate per peak width per cis-hBTL
range_hBTL_enrichment_stats %>%
  mutate(mark = mark %>% factor(c("H3K4me3", "H3K27ac", "H3K36me3", "H3K27me3", "H3K9me3", "H3K4me1"))) %>% 
  ggplot(aes(x = mark, y = frac_of_tile_width_with_cis_hBTL_per_cis_hBTL_million, fill = celltype)) +
  geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.75) +
  labs(x = "mark",
       y = "tile width w/ cis-hBTL\nper total peak width\nper cis-hBTL\n√ó million",
       fill = "cell type") +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5, hjust = 0),
        aspect.ratio = 3/4)

ggsave("plots/tiles_w_cis_hBTLs_normalized.png")

```



