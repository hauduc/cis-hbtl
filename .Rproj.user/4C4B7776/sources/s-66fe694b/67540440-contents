---
title: "Feature analysis v2"
output: html_notebook
---
```{r}
# R 4.1.3
# x86_64-centos7-linux-gnu
library(plyranges)
library(VariantAnnotation)
library(MutationalPatterns)
library(genomation)
library(Gviz)
library(BSgenome.Hsapiens.UCSC.hg38)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(systemPipeR)
library(biomaRt)
library(LDlinkR)
library(AllelicImbalance)
library(broom)
library(gt)
library(gtsummary)
library(UpSetR)
library(tidyverse)

const_canonical_chromosomes <- str_c("chr", c(1:22, "X", "Y"))

vector_marks <- c("H3K4me3", "H3K4me1", "H3K27ac", "H3K9me3", "H3K27me3", "H3K36me3")
vector_celltypes <- c("BC", "LP", "LC", "SC")
vector_individuals <- c("Individual_14_17_LP_DNA",
                        "Individual_14_18_BC__356K_RNA",
                        "Individual_11_18_BC_RNA_DNA",
                        "Individual_22_18_BC_RNA_DNA",
                        "Individual_24_18_BC_RNA_DNA",
                        "Individual_38_18_LC_RNA_DNA",
                        "Individual_30_18_LC_RNA_DNA",
                        "Individual_15_18_LC_RNA_DNA")


```

Load in UCSC knownGene features
```{r}
txdb_grlist <- genFeatures(TxDb.Hsapiens.UCSC.hg38.knownGene, featuretype = "all", reduce_ranges = FALSE, upstream = 1000, downstream = 0, verbose = TRUE)
```

Annotate if query features are present in knownGene
Create function to use in loop
```{r}
# Function to pull out the fraction of query records that overlap with a knownGene feature
get_feature_frac_overlaps <- function(query, features = txdb_grlist) {
  
  # Instantiate 
  final_feature_overlaps <- tibble()
  
  # Loop through types of features and count up fraction query features (i.e. peaks or cis-hBTLs) covered by a sequency ontology (exon, intron, fiveUTR, etc...)
  for (feature_names in names(features)) {
    current_feature_overlaps <- 
      tibble(feature = feature_names,
             fraction_overlapping = query %>% join_overlap_intersect(features[[feature_names]]) %>% width() %>% sum() / query %>% width() %>% sum())
    
    final_feature_overlaps <-
      bind_rows(final_feature_overlaps, current_feature_overlaps)
  }
  
  final_feature_overlaps
  
}
```

Create overlaps summary for all modalities
```{r}
all_overlaps <- tibble()
for (MARK in vector_marks) {
  for (CELLTYPE in vector_celltypes) {
    for (INDIVIDUAL in vector_individuals) {
      
      MODALITY <- str_c(MARK, CELLTYPE, sep = "_")
      
      # Get baseline peaks overlap fraction with each feature
      peak_frac_overlaps <- 
        list_peak_wasp[[MODALITY]][[INDIVIDUAL]] %>% 
        get_feature_frac_overlaps(features = txdb_grlist) %>% 
        mutate(enrichment_type = "peak",
               .before = feature)
      
      # Get cis-hBTLs overlap fraction with each feature
      cis_hBTL_frac_overlaps <- 
        consensus.all.spaas.rpkm.bed %>% 
        plyranges::filter(mark == MARK, celltype == CELLTYPE, get(INDIVIDUAL) == TRUE) %>% 
        get_feature_frac_overlaps(features = txdb_grlist) %>% 
        mutate(enrichment_type = "cis-hBTL",
               .before = feature)
      
      # Join
      joined_overlaps <- 
        bind_rows(peak_frac_overlaps,
                  cis_hBTL_frac_overlaps) %>% 
        mutate(mark = MARK,
               celltype = CELLTYPE,
               individual = INDIVIDUAL,
               .before = feature)
      
      all_overlaps <-
        bind_rows(all_overlaps, joined_overlaps)
      
    }
  }
}
```

Simplify data by getting the average across all individuals for each modality
```{r}
all_overlaps_grouped <- all_overlaps %>% 
  group_by(enrichment_type, mark, celltype, feature) %>% 
  summarize(fraction_overlapping_mean = mean(fraction_overlapping)) %>% 
  ungroup() %>% 
  # Create ordered factors for custom ordering of variables in panels of ggplot below
  mutate(enrichment_type = enrichment_type %>% factor(c("peak", "cis-hBTL")),
         mark = mark %>% factor(c("H3K4me3", "H3K27ac", "H3K4me1", "H3K9me3", "H3K27me3", "H3K36me3")),
         celltype = celltype %>% factor(c("BC", "LP", "LC", "SC")),
         feature = feature %>% factor(c("transcript", "promoter", "intron", "exon", "cds", "fiveUTR", "threeUTR", "intergenic")))
```

Pivot wider and calculate difference between cis-hBTLs and peaks
```{r}
all_overlaps_grouped_wide <- 
  all_overlaps_grouped %>% 
  pivot_wider(id_cols = c(mark, celltype, feature), names_from = enrichment_type, values_from = fraction_overlapping_mean, names_prefix = "fraction overlapping mean ") %>% 
  mutate(`log2 of ratio of fraction overlapping cis-hBTLs vs. peaks` = log2(`fraction overlapping mean cis-hBTL` / `fraction overlapping mean peak`))
  
```


Visualize output
```{r}
# This chart displays the mean fraction of peaks and cis-hBTLs that overlap genomic features

all_overlaps_grouped %>% 
  ggplot(aes(x = enrichment_type, y = fraction_overlapping_mean, fill = feature)) +
  geom_bar(position = "stack", stat = "identity") +
  facet_grid(vars(mark), vars(celltype)) +
  theme_bw() +
  labs(x = element_blank(), 
       y = element_blank())

ggsave("plots/all_overlaps_with_genomic_features_untransformed_bar_stack.png",
       width = 10,
       height = 7)
```

Plot dots fractional overlap differences
```{r}
all_overlaps_grouped_wide %>% 
  ggplot(aes(x = feature,
             y = `log2 of ratio of fraction overlapping cis-hBTLs vs. peaks`,
             color = feature)) +
  geom_hline(yintercept = 0,
             size = 0.1) +
  geom_point() +
  facet_grid(vars(mark), vars(celltype)) +
  theme_bw() +
  labs(x = element_blank(), 
       y = "log2(cis-hBTL fraction overlapping feature / peak fraction overlapping feature)") +
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank())

ggsave("plots/all_overlaps_with_genomic_features_transformed_dotplots.png",
       width = 10,
       height = 7)

```

Plot box-and-whiskers fractional overlap differences
```{r}
all_overlaps_grouped_wide %>% 
  ggplot(aes(x = feature,
             y = `log2 of ratio of fraction overlapping cis-hBTLs vs. peaks`,
             #color = feature
             )) +
  geom_hline(yintercept = 0,
             #size = 0.1, 
             linetype = "dashed", 
             color = "red",
             ) +
  ylim(c(-2.5, 2.5)) +
  geom_boxplot() +
  theme_bw() +
  labs(x = element_blank(), 
       y = "log2(cis-hBTL % / peak % overlapping feature)")

# Save for PowerPoint
ggsave("plots/all_overlaps_with_genomic_features_transformed_boxplot.png",
       width = 10,
       height = 5)
```
