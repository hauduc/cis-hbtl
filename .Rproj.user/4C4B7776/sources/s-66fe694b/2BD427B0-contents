---
title: "unique_peak_enrichment"
output: html_notebook
---

```{r}
#!/gsc/software/linux-x86_64-centos7/R-4.1.3/lib64/R/bin/R
# R 4.1.3
# x86_64-centos7-linux-gnu
library(plyranges)
library(VariantAnnotation)
library(MutationalPatterns)
library(genomation)
library(Gviz)
library(BSgenome.Hsapiens.UCSC.hg38)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(systemPipeR)
library(biomaRt)
library(LDlinkR)
library(tidyverse)

const_canonical_chromosomes <- str_c("chr", c(1:22, "X", "Y"))

vector_marks <- c("H3K4me3", "H3K4me1", "H3K27ac", "H3K9me3", "H3K27me3", "H3K36me3")
vector_celltypes <- c("BC", "LP", "LC", "SC")
vector_individuals <- c("Individual_14_17_LP_DNA",
                        "Individual_14_18_BC__356K_RNA",
                        "Individual_11_18_BC_RNA_DNA",
                        "Individual_22_18_BC_RNA_DNA",
                        "Individual_24_18_BC_RNA_DNA",
                        "Individual_38_18_LC_RNA_DNA",
                        "Individual_30_18_LC_RNA_DNA",
                        "Individual_15_18_LC_RNA_DNA")

```
Code plan:
1. Select modality - i.e. H3K4me3_BC, for peaks and cis-hBTLs
2. Add Mark, Celltype, and Individual info as metadata columns
3. Merge all peaks together
3.5 Concat all unique cis-hBTLs together
4. Disjoin peaks and add a key column of individuals_involved as TRUE_FALSE_TRUE_... etc...
5. Left join (peaks, cis_hBTLs)
6. mutate new column TRUE/FALSE if key column of each row matches
7. Count up...
  a. Percentage of peak tiles that can be explained by cis-hBTLs
  b. Modalities that can be most explained by cis-hBTLs (i.e. H3K4me3 unique peaks are most determined by cis-hBTLs)
  Can you show that tiles are enriched for compatible cis-hBTLs compared to other variants?
  Show range of enrichments
  Need to figure out the: 1. Number of tiles that can be "explained" by a matching cis-hBTL 2. Pull out top ranked tiles with highest proportion of explanatory cis-hBTLs

Measure:
Compatible cis-hBTLs intersecting each tile type divided by total number of of variants intersecting that tile type
Compare the above ratio with the ratio of modality cis-hBTLs to total variants
Graph this ratio across all modality types and for all mark types and cell types

Prepare peaks
```{r}
current_id_ranges_peak <- list_peak_wasp[["H3K27ac_BC"]] %>% 
  unlist() %>% 
  disjoin_ranges()

for (individual in names(list_peak_wasp[["H3K27ac_BC"]])) {
  
  current_id_ranges_peak <- current_id_ranges_peak %>% 
      plyranges::mutate("{individual}" := overlapsAny(current_id_ranges_peak, list_peak_wasp[["H3K27ac_BC"]][[individual]], type = "within"))
  
  }

current_id_ranges_peak <- current_id_ranges_peak %>% 
  plyranges::mutate(individuals_peaks = str_c(get(vector_individuals[1]),
                                              get(vector_individuals[2]),
                                              get(vector_individuals[3]),
                                              get(vector_individuals[4]),
                                              get(vector_individuals[5]),
                                              get(vector_individuals[6]),
                                              get(vector_individuals[7]),
                                              get(vector_individuals[8]), sep = "_")) %>%
  plyranges::select(individuals_peaks)

```

Prepare all variants
```{r}
current_id_ranges_all_variants <- list_variant_calls %>% 
  unlist() %>% 
  disjoin_ranges()

for (individual in names(list_variant_calls)) {
  
  current_id_ranges_all_variants <- current_id_ranges_all_variants %>% 
      plyranges::mutate("{individual}" := overlapsAny(current_id_ranges_all_variants, list_variant_calls[[individual]], type = "within"))
  
  }

current_id_ranges_all_variants <- current_id_ranges_all_variants %>% 
  plyranges::mutate(individuals_all_variants = str_c(get(vector_individuals[1]),
                                                     get(vector_individuals[2]),
                                                     get(vector_individuals[3]),
                                                     get(vector_individuals[4]),
                                                     get(vector_individuals[5]),
                                                     get(vector_individuals[6]),
                                                     get(vector_individuals[7]),
                                                     get(vector_individuals[8]), sep = "_")) %>%
  plyranges::select(individuals_all_variants)

```

Prepare cis-hBTLs
```{r}
current_id_ranges_cis_hBTL <- consensus.all.spaas.rpkm.bed %>% 
  plyranges::filter(mark == "H3K27ac", celltype == "BC") %>% 
  plyranges::mutate(individuals_cis_hBTL = str_c(get(vector_individuals[1]),
                                                 get(vector_individuals[2]),
                                                 get(vector_individuals[3]),
                                                 get(vector_individuals[4]),
                                                 get(vector_individuals[5]),
                                                 get(vector_individuals[6]),
                                                 get(vector_individuals[7]),
                                                 get(vector_individuals[8]), sep = "_")) %>%
  plyranges::select(individuals_cis_hBTL)

```

Compare peaks and cis-hBTLs
```{r}
unique_peak_enrichment <- current_id_ranges_peak %>% 
  plyranges::mutate(overlaps_all_vars  = countOverlaps(., current_id_ranges_all_variants),
                    overlaps_cis_hBTLs = countOverlaps(., current_id_ranges_cis_hBTL),
                    overlaps_non_cis_hBTLs = overlaps_all_vars - overlaps_cis_hBTLs,
                    fraction_cis_hBTL = overlaps_cis_hBTLs / overlaps_all_vars,
                    has_a_cis_hBTL = overlaps_cis_hBTLs > 0)

width(unique_peak_enrichment)

```




count_overlaps(current_id_ranges_peak, current_id_ranges_all_variants)

join_overlap_inner(current_id_ranges_peak, current_id_ranges_all_variants)

