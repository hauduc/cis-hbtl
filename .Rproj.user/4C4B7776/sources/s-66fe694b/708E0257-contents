---
title: "Cohort-wide Jaccard and Spearman Clustering/Heatmapping"
output: html_notebook
---
```{r}
#!/gsc/software/linux-x86_64-centos7/R-4.1.3/lib64/R/bin/R
# R 4.1.3
# x86_64-centos7-linux-gnu
library(plyranges)
library(VariantAnnotation)
library(MutationalPatterns)
library(genomation)
library(Gviz)
library(BSgenome.Hsapiens.UCSC.hg38)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(systemPipeR)
library(biomaRt)
library(LDlinkR)
library(AllelicImbalance)
library(broom)
library(gt)
library(gtsummary)
library(UpSetR)
library(pheatmap)
library(umap)
library(tidyverse)
library(ggdendro)

const_canonical_chromosomes <- str_c("chr", c(1:22, "X"))

vector_marks <- c("H3K4me3", "H3K27ac", "H3K4me1", "H3K9me3", "H3K27me3", "H3K36me3")
vector_celltypes <- c("BC", "LP", "LC", "SC")
vector_individuals <- c("Individual_14_17_LP_DNA",
                        "Individual_14_18_BC__356K_RNA",
                        "Individual_11_18_BC_RNA_DNA",
                        "Individual_22_18_BC_RNA_DNA",
                        "Individual_24_18_BC_RNA_DNA",
                        "Individual_38_18_LC_RNA_DNA",
                        "Individual_30_18_LC_RNA_DNA",
                        "Individual_15_18_LC_RNA_DNA")

vector_individuals_encoded <- c("Individual_1",
                                "Individual_2",
                                "Individual_3",
                                "Individual_4",
                                "Individual_5",
                                "Individual_6",
                                "Individual_7",
                                "Individual_8")
```

# Source Jonathan code
```{r}
source("/projects/epigenomics3/epigenomics3_results/users/jsteif/scripts/functions_to_source/spearman_pheatmapV2.R") 
```

# Cluster using top-varying ROIs method
1. Take ROIs
2. Subtract blacklisted ranges
3. Tile into 150bp bins
4. For each sample within a mark type, get mean treatment pileup per bin and add as a column to original tiles GRanges object
5. Row-wise, compute mean, relative standard deviation (RSD), and variance-to-mean ratio
6. Pick top n = 2,000 most variable regions
7. Use the above GRanges as a starting point for pairwise Spearman correlations as has previously been done

# Create ROI GRanges for later use
```{r}
# H3K4me3 & H3K9me3 (essentially the same as before)
roi_promoters <- 
  TxDb.Hsapiens.UCSC.hg38.knownGene %>% 
  promoters() %>% 
  keepSeqlevels(const_canonical_chromosomes, pruning.mode = "coarse") %>% 
  reduce_ranges()

# H3K27ac, H3K4me1, & H3K27me3
download.file("https://ars.els-cdn.com/content/image/1-s2.0-S2211124716314784-mmc6.xlsx", "data/1-s2.0-S2211124716314784-mmc6.xlsx")

roi_breast_normal_enhancers <- 
  readxl::read_excel("data/1-s2.0-S2211124716314784-mmc6.xlsx") %>% 
  makeGRangesFromDataFrame(keep.extra.columns = TRUE, 
                           ignore.strand = TRUE,
                           starts.in.df.are.0based = TRUE,
                           seqinfo = seqinfo(BSgenome.Hsapiens.UCSC.hg38)) %>%
  keepSeqlevels(const_canonical_chromosomes, pruning.mode = "coarse") %>%
  reduce_ranges()

# H3K36me3
roi_cds <- 
  TxDb.Hsapiens.UCSC.hg38.knownGene %>% 
  cds() %>% 
  keepSeqlevels(const_canonical_chromosomes, pruning.mode = "coarse") %>% 
  reduce_ranges()
```

# Make cohort ROI data-filled table - mean treatment pileup strategy
```{r}
make_cohort_roi_table_mean_treat_pileup <- function(mark, rois, blacklist_regions_gr = blacklist_encode) {
  # Establish tiled regions of interest GRanges
  # Remove blacklisted areas
  rois_filtered <- 
    rois %>% 
    keepSeqlevels(const_canonical_chromosomes, pruning.mode = "coarse") %>%
    filter_by_non_overlaps(blacklist_regions_gr)
  
  # Tile promoter ranges into 150bp tiles
  rois_filtered_tiled <-
    rois_filtered %>% 
    tile_ranges(width = 150) %>% 
    plyranges::mutate(tile_id = seq_along(.))
  
  # Create GRanges to receive mean per-tile bigWig scores for all bigWigs
  rois_filtered_tiled_populated <- rois_filtered_tiled
  
  # Create table containing mean_treatment_pileup in roi tiles for entire cohort
  for (current_sample in names(list_treat_pileup_bw_wasp_files_v2[[mark]])) {
  
  # Read in bigWig corresponding to current sample being worked on
  current_bw <- read_bigwig(list_treat_pileup_bw_wasp_files_v2[[mark]][[current_sample]]) %>% keepSeqlevels(const_canonical_chromosomes, pruning.mode = "coarse")
  
  # Add bw column to rois GRanges
  current_rois_bw_column <-
    current_bw %>% 
    join_overlap_intersect(rois_filtered %>% tile_ranges(width = 1)) %>% 
    join_overlap_left(rois_filtered_tiled) %>% 
    as_tibble() %>% 
    group_by(tile_id) %>% 
    summarize(mean_pileup_depth = mean(score))
  
  # Backfill empty tiles as NAs on full list of tile IDs by joining by tile ID
  current_rois_bw_column_depth_correct_length <-
    left_join(as_tibble(rois_filtered_tiled_populated), current_rois_bw_column, by = "tile_id") %>% 
    pull(mean_pileup_depth)
  
  # Add mean pileup depth per tile for current sample to rois_filtered_tiled_populated as a new column
  rois_filtered_tiled_populated <- 
    rois_filtered_tiled_populated %>% 
    plyranges::mutate("{current_sample}" := current_rois_bw_column_depth_correct_length)
  }
  
  # Return completed table
  rois_filtered_tiled_populated
}
```

Calculate variance metrics for each roi tile
In order to get a final GRanges containing most important ranges for each mark to be used for clustering
```{r}
# Calculate (rowwise) mean, relative standard deviation (RSD), and variance-to-mean ratio for each tile
# Testing on H3K4me3
make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup <- function(rois_filtered_tiled_populated, n_regions = 2000) {
  # Single-shot process on rois table filled with bigWig information
  rois_filtered_tiled_populated %>% 
    as_tibble() %>% 
    rowwise() %>% # Calculate rowwise for each tile
    mutate(samples_mean = mean(c_across(Individual_1_BC:hTERT_L2)),
           samples_RSD  = (100 * sd(c_across(Individual_1_BC:hTERT_L2)))/samples_mean) %>% # Calculate RSD to find top-varying tiles, unaffected by mean
    ungroup() %>% 
    filter(samples_mean > 1) %>% # keep only areas with a large mean to ignore sparse regions
    arrange(desc(samples_RSD)) %>%  # choose top-varying regions
    head(n_regions) %>% # Prioritize n top-varying regions and create GRanges containing just top-varying regions
    select(-width, -strand) %>% # Make conversion to GRanges possible
    makeGRangesFromDataFrame(keep.extra.columns = TRUE, ignore.strand = TRUE, starts.in.df.are.0based = FALSE, seqinfo = seqinfo(BSgenome.Hsapiens.UCSC.hg38)) %>%
    keepSeqlevels(const_canonical_chromosomes, pruning.mode = "coarse") %>% 
    sort() # Make back into proper sorted GRanges with hg38 genome and only canonical chromosomes
}
```

Perform ROI table and top-varying selecting function on all marks
Run on promoters
```{r}
# Initialize list
rois_populated_mean_treat_pileup_promoters <- list()

# Execute on each mark type
# H3K4me3
rois_populated_mean_treat_pileup_promoters[["H3K4me3"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K4me3", rois = roi_promoters) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K27ac
rois_populated_mean_treat_pileup_promoters[["H3K27ac"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K27ac", rois = roi_promoters) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K4me1
rois_populated_mean_treat_pileup_promoters[["H3K4me1"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K4me1", rois = roi_promoters) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K9me3
rois_populated_mean_treat_pileup_promoters[["H3K9me3"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K9me3", rois = roi_promoters) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K27me3
rois_populated_mean_treat_pileup_promoters[["H3K27me3"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K27me3", rois = roi_promoters) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K36me3
rois_populated_mean_treat_pileup_promoters[["H3K36me3"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K36me3", rois = roi_promoters) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)
```
Run on enhancers
```{r}
# Initialize list
rois_populated_mean_treat_pileup_enhancers <- list()

# Execute on each mark type
# H3K4me3
rois_populated_mean_treat_pileup_enhancers[["H3K4me3"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K4me3", rois = roi_breast_normal_enhancers) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K27ac
rois_populated_mean_treat_pileup_enhancers[["H3K27ac"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K27ac", rois = roi_breast_normal_enhancers) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K4me1
rois_populated_mean_treat_pileup_enhancers[["H3K4me1"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K4me1", rois = roi_breast_normal_enhancers) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K9me3
rois_populated_mean_treat_pileup_enhancers[["H3K9me3"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K9me3", rois = roi_breast_normal_enhancers) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K27me3
rois_populated_mean_treat_pileup_enhancers[["H3K27me3"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K27me3", rois = roi_breast_normal_enhancers) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K36me3
rois_populated_mean_treat_pileup_enhancers[["H3K36me3"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K36me3", rois = roi_breast_normal_enhancers) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)
```
Run on cds
```{r}
# Initialize list
rois_populated_mean_treat_pileup_cds <- list()

# Execute on each mark type
# H3K4me3
rois_populated_mean_treat_pileup_cds[["H3K4me3"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K4me3", rois = roi_cds) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K27ac
rois_populated_mean_treat_pileup_cds[["H3K27ac"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K27ac", rois = roi_cds) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K4me1
rois_populated_mean_treat_pileup_cds[["H3K4me1"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K4me1", rois = roi_cds) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K9me3
rois_populated_mean_treat_pileup_cds[["H3K9me3"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K4me3", rois = roi_cds) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K27me3
rois_populated_mean_treat_pileup_cds[["H3K27me3"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K27me3", rois = roi_cds) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)

# H3K36me3
rois_populated_mean_treat_pileup_cds[["H3K36me3"]] <- 
  make_cohort_roi_table_mean_treat_pileup(mark = "H3K36me3", rois = roi_cds) %>% 
  make_n_top_varying_regions_from_cohort_roi_table_for_mean_treat_pileup(n_regions = 2000)
```

# Plot using pheatmap
```{r}
# Create function to save pheatmap
save_pheatmap_png <- function(x, filename, units = "in", width = 10, height = 10) {
   stopifnot(!missing(x))
   stopifnot(!missing(filename))
   png(filename, units = units, width = width, height = height, res = 300)
   grid::grid.newpage()
   grid::grid.draw(x$gtable)
   dev.off()
}

# Create function that generates pheatmap
make_pheatmap_on_top_rois_populated_mean_treat_pileup <- function(mark, rois_table_populated, feature_name, description) {
  # Add in metadata
  # This will vary depending on exact mark assessed
  # H3K9me3 is missing one BC dataset but the rest of the marks aren't
  if (mark == "H3K9me3") {
    current_metadata_frame <- 
      data.frame(row.names = list_peak[[mark]] %>% names(),
                 Cell_type = c(rep("BC", 7), 
                               rep("LP", 8), 
                               rep("LC", 8), 
                               rep("SC", 8), 
                               rep("Cell line", 3)) %>% factor(c("BC", "LP", "LC", "SC", "Cell line")),
                 stringsAsFactors = FALSE)
    } else {
    current_metadata_frame <- 
      data.frame(row.names = list_peak[[mark]] %>% names(),
                 Cell_type = c(rep("BC", 8), 
                               rep("LP", 8), 
                               rep("LC", 8), 
                               rep("SC", 8), 
                               rep("Cell line", 3)) %>% factor(c("BC", "LP", "LC", "SC", "Cell line")),
                 stringsAsFactors = FALSE)
    }
  
  # Plot bigWig-filled ROI GRanges in pheatmap as a matrix with generated metadata
  rois_table_populated[[mark]] %>% 
    mcols() %>% 
    as.data.frame() %>% 
    select(-partition, -samples_mean, -samples_RSD) %>% 
    column_to_rownames("tile_id") %>% 
    as.matrix() %>% 
    pheatmap(annotation_col = current_metadata_frame,
             clustering_method = "ward.D2",
             clustering_distance_cols = "spearman", 
             color = colorRampPalette(c("white", "blue"))(100),
             main = str_c(mark, description, sep = " "), 
             show_colnames = TRUE,
             show_rownames = FALSE,
             fontsize = 12,
             width = 10,
             height = 10) %>%
    save_pheatmap_png(str_c("plots/pheatmap_", mark, "_spearman_rois_treatment_pileup_top_varying_", feature_name, ".png"))
} 
```

Execute on all marks and all ROI tables
```{r}
# Promoters
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K4me3", rois_populated_mean_treat_pileup_promoters, "promoters", "Treatment Read Pileup Depth in 150bp Bins within Promoters")
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K27ac", rois_populated_mean_treat_pileup_promoters, "promoters", "Treatment Read Pileup Depth in 150bp Bins within Promoters")
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K4me1", rois_populated_mean_treat_pileup_promoters, "promoters", "Treatment Read Pileup Depth in 150bp Bins within Promoters")
#make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K9me3", rois_populated_mean_treat_pileup_promoters, "promoters", "Treatment Read Pileup Depth in 150bp Bins within Promoters")
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K27me3", rois_populated_mean_treat_pileup_promoters, "promoters", "Treatment Read Pileup Depth in 150bp Bins within Promoters")
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K36me3", rois_populated_mean_treat_pileup_promoters, "promoters", "Treatment Read Pileup Depth in 150bp Bins within Promoters")

# Enhancers
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K4me3", rois_populated_mean_treat_pileup_enhancers, "enhancers", "Treatment Read Pileup Depth in 150bp Bins within Enhancers")
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K27ac", rois_populated_mean_treat_pileup_enhancers, "enhancers", "Treatment Read Pileup Depth in 150bp Bins within Enhancers")
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K4me1", rois_populated_mean_treat_pileup_enhancers, "enhancers", "Treatment Read Pileup Depth in 150bp Bins within Enhancers")
#make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K9me3", rois_populated_mean_treat_pileup_enhancers, "enhancers", "Treatment Read Pileup Depth in 150bp Bins within Enhancers")
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K27me3", rois_populated_mean_treat_pileup_enhancers, "enhancers", "Treatment Read Pileup Depth in 150bp Bins within Enhancers")
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K36me3", rois_populated_mean_treat_pileup_enhancers, "enhancers", "Treatment Read Pileup Depth in 150bp Bins within Enhancers")

# CDS
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K4me3", rois_populated_mean_treat_pileup_cds, "CDS", "Treatment Read Pileup Depth in 150bp Bins within CDSs")
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K27ac", rois_populated_mean_treat_pileup_cds, "CDS", "Treatment Read Pileup Depth in 150bp Bins within CDSs")
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K4me1", rois_populated_mean_treat_pileup_cds, "CDS", "Treatment Read Pileup Depth in 150bp Bins within CDSs")
#make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K9me3", rois_populated_mean_treat_pileup_cds, "CDS", "Treatment Read Pileup Depth in 150bp Bins within CDSs")
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K27me3", rois_populated_mean_treat_pileup_cds, "CDS", "Treatment Read Pileup Depth in 150bp Bins within CDSs")
make_pheatmap_on_top_rois_populated_mean_treat_pileup("H3K36me3", rois_populated_mean_treat_pileup_cds, "CDS", "Treatment Read Pileup Depth in 150bp Bins within CDSs")
```
