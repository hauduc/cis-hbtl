"0","granges_peak_cor <- function(bw1_path, bw2_path, peaks1_gr, peaks2_gr, blacklist_regions_gr = NULL, cor_method = c(""pearson"", ""kendall"", ""spearman""), tile_widths = 50) {"
"0","  "
"0","  # Read in bigWigs"
"0","  bw1 <- read_bigwig(bw1_path)"
"0","  bw2 <- read_bigwig(bw2_path)"
"0","  "
"0","  # Get peak union valid ranges with or without blacklist"
"0","  if (is.null(blacklist_regions_gr)) {"
"0","    peak_valid_union_ranges <- "
"0","      union_ranges(peaks1_gr, peaks2_gr) %>% "
"0","      keepSeqlevels(const_canonical_chromosomes, pruning.mode = ""coarse"")"
"0","  } else {"
"0","    peak_valid_union_ranges <- "
"0","      union_ranges(peaks1_gr, peaks2_gr) %>% "
"0","      setdiff_ranges(blacklist_regions_gr) %>% "
"0","      keepSeqlevels(const_canonical_chromosomes, pruning.mode = ""coarse"")"
"0","  }"
"0","  "
"0","  # Create peak tiles of x basepairs in width within the valid ranges"
"0","  # Generate unique ID for each 50bp range"
"0","  peaks_tiles <- peak_valid_union_ranges %>% "
"0","    tile_ranges(width = tile_widths) %>% "
"0","    plyranges::mutate(tile_id = str_c(""tile_"", seq_along(.)))"
"0","  "
"0","  # Take bigWig"
"0","  # Subset by valid peak ranges and break these subsets up into single basepair regions with the score annotated"
"0","  # Remove non-canonical chromosomes"
"0","  # Annotate with the unique tile ids that are x-basepairs wide"
"0","  # Convert to tibble to group by tile_id faster, then group and summarize mean of bigWig scores by tile_id that are x-basepairs wide"
"0","  bw1_peak_areas_tiled_summarized <- "
"0","    bw1 %>% "
"0","    join_overlap_intersect(peak_valid_union_ranges %>% tile_ranges(width = 1)) %>% "
"0","    keepSeqlevels(const_canonical_chromosomes, pruning.mode = ""coarse"") %>% "
"0","    join_overlap_left(peaks_tiles) %>% "
"0","    as_tibble() %>% "
"0","    group_by(tile_id) %>% "
"0","    summarize(mean_pileup_depth = mean(score))"
"0","  "
"0","  # Repeat above for bw2"
"0","  bw2_peak_areas_tiled_summarized <- "
"0","    bw2 %>% "
"0","    join_overlap_intersect(peak_valid_union_ranges %>% tile_ranges(width = 1)) %>% "
"0","    keepSeqlevels(const_canonical_chromosomes, pruning.mode = ""coarse"") %>% "
"0","    join_overlap_left(peaks_tiles) %>% "
"0","    as_tibble() %>% "
"0","    group_by(tile_id) %>% "
"0","    summarize(mean_pileup_depth = mean(score))"
"0","  "
"0","  # Clean up large files"
"0","  rm(bw1, bw2)"
"0","  "
"0","  # Return correlation of mean scores vector of x-basepair windows of two bigWigs"
"0","  cor(bw1_peak_areas_tiled_summarized$mean_pileup_depth,"
"0","      bw2_peak_areas_tiled_summarized$mean_pileup_depth,"
"0","      method = cor_method)"
"0","}"
"0",""
