"0","```r
# Initialize results data.frame
range_hBTL_enrichment_stats <- data.frame()

for (MARK in vector_marks) {
  for (CELLTYPE in vector_celltypes) {
    
    # Establish modality string
    MODALITY <- str_c(MARK, CELLTYPE, sep = \"_\")
    
    # Prepare cis-hBTLs
    current_id_ranges_cis_hBTL <- consensus.all.spaas.rpkm.bed %>% 
      plyranges::filter(mark == MARK, celltype == CELLTYPE)
    
    # Prepare peaks
    current_id_ranges_peak <- list_peak_wasp[[MODALITY]] %>% 
      unlist() %>% 
      disjoin_ranges()
    
    # Compare peaks and cis-hBTLs
    current_unique_peak_enrichment <- current_id_ranges_peak %>% 
      plyranges::mutate(overlaps_cis_hBTLs = countOverlaps(., current_id_ranges_cis_hBTL),
                        has_a_cis_hBTL = overlaps_cis_hBTLs > 0)
    
    # Calculate stats and place in stackable dataframe
    current_stats <- data.frame(mark = MARK,
                                
                                celltype = CELLTYPE,
                                
                                frac_of_tile_width_with_cis_hBTL =              sum(width(current_unique_peak_enrichment %>% plyranges::filter(has_a_cis_hBTL == TRUE))) / 
                                                                                sum(width(current_unique_peak_enrichment)),
                                
                                frac_of_tile_width_with_cis_hBTL_per_cis_hBTL = sum(width(current_unique_peak_enrichment %>% plyranges::filter(has_a_cis_hBTL == TRUE))) / 
                                                                                sum(width(current_unique_peak_enrichment)) / 
                                                                                length(current_id_ranges_cis_hBTL),
                                
                                frac_of_tiles_with_cis_hBTL =                 length(current_unique_peak_enrichment %>% plyranges::filter(has_a_cis_hBTL == TRUE)) / 
                                                                                length(current_unique_peak_enrichment),
                                
                                frac_of_tiles_with_cis_hBTL_per_cis_hBTL =    length(current_unique_peak_enrichment %>% plyranges::filter(has_a_cis_hBTL == TRUE)) / 
                                                                                length(current_unique_peak_enrichment) / 
                                                                                length(current_id_ranges_cis_hBTL))
    
    range_hBTL_enrichment_stats <- bind_rows(range_hBTL_enrichment_stats,
                                             current_stats)
    
  }
}

```"
