"0","# Create new object for H3K4me3 peaks organized by individual-celltype combo"
"0","list_peak_H3K4me3 <- GRangesList()"
"0",""
"0","# Copy over corresponding GRanges"
"0","list_peak_H3K4me3$Individual_1_BC <- list_peak_wasp$H3K4me3_BC[[1]]"
"0","list_peak_H3K4me3$Individual_2_BC <- list_peak_wasp$H3K4me3_BC[[2]] "
"0","list_peak_H3K4me3$Individual_3_BC <- list_peak_wasp$H3K4me3_BC[[3]] "
"0","list_peak_H3K4me3$Individual_4_BC <- list_peak_wasp$H3K4me3_BC[[4]] "
"0","list_peak_H3K4me3$Individual_5_BC <- list_peak_wasp$H3K4me3_BC[[5]] "
"0","list_peak_H3K4me3$Individual_6_BC <- list_peak_wasp$H3K4me3_BC[[6]] "
"0","list_peak_H3K4me3$Individual_7_BC <- list_peak_wasp$H3K4me3_BC[[7]] "
"0","list_peak_H3K4me3$Individual_8_BC <- list_peak_wasp$H3K4me3_BC[[8]] "
"0","list_peak_H3K4me3$Individual_1_LP <- list_peak_wasp$H3K4me3_LP[[1]]"
"2","Warning in .Seqinfo.mergexy(x, y) :"
"2","
 "
"2"," Each of the 2 combined objects has sequence levels not in the other:
  - in 'x': chr4_GL000008v2_random, chr14_KI270725v1_random, chr22_KI270732v1_random, chrUn_KI270336v1, chrUn_KI270743v1
  - in 'y': chrUn_KI270742v1, chrUn_KI270755v1, chrUn_KI270418v1, chrUn_KI270442v1, chrUn_KI270310v1, chrUn_KI270538v1, chrUn_KI270322v1, chr14_GL000009v2_random, chrUn_KI270748v1
  Make sure to always combine/compare objects based on the same reference
  genome (use suppressWarnings() to suppress this warning).
"
"0","list_peak_H3K4me3$Individual_2_LP <- list_peak_wasp$H3K4me3_LP[[2]]"
"0","list_peak_H3K4me3$Individual_3_LP <- list_peak_wasp$H3K4me3_LP[[3]]"
"0","list_peak_H3K4me3$Individual_4_LP <- list_peak_wasp$H3K4me3_LP[[4]]"
"0","list_peak_H3K4me3$Individual_5_LP <- list_peak_wasp$H3K4me3_LP[[5]]"
"0","list_peak_H3K4me3$Individual_6_LP <- list_peak_wasp$H3K4me3_LP[[6]]"
"0","list_peak_H3K4me3$Individual_7_LP <- list_peak_wasp$H3K4me3_LP[[7]]"
"0","list_peak_H3K4me3$Individual_8_LP <- list_peak_wasp$H3K4me3_LP[[8]]"
"0","list_peak_H3K4me3$Individual_1_LC <- list_peak_wasp$H3K4me3_LC[[1]]"
"2","Warning in .Seqinfo.mergexy(x, y) :"
"2","
 "
"2"," Each of the 2 combined objects has sequence levels not in the other:
  - in 'x': chr14_KI270725v1_random, chr22_KI270732v1_random, chr3_GL000221v1_random, chrUn_KI270336v1, chrUn_KI270743v1, chrUn_KI270742v1, chrUn_KI270755v1, chrUn_KI270418v1, chrUn_KI270322v1, chr14_GL000009v2_random
  - in 'y': chr17_KI270729v1_random, chr22_KI270737v1_random, chrUn_KI270512v1, chrUn_KI270320v1
  Make sure to always combine/compare objects based on the same reference
  genome (use suppressWarnings() to suppress this warning).
"
"0","list_peak_H3K4me3$Individual_2_LC <- list_peak_wasp$H3K4me3_LC[[2]]"
"0","list_peak_H3K4me3$Individual_3_LC <- list_peak_wasp$H3K4me3_LC[[3]]"
"0","list_peak_H3K4me3$Individual_4_LC <- list_peak_wasp$H3K4me3_LC[[4]]"
"0","list_peak_H3K4me3$Individual_5_LC <- list_peak_wasp$H3K4me3_LC[[5]]"
"0","list_peak_H3K4me3$Individual_6_LC <- list_peak_wasp$H3K4me3_LC[[6]]"
"0","list_peak_H3K4me3$Individual_7_LC <- list_peak_wasp$H3K4me3_LC[[7]]"
"0","list_peak_H3K4me3$Individual_8_LC <- list_peak_wasp$H3K4me3_LC[[8]]"
"0","list_peak_H3K4me3$Individual_1_SC <- list_peak_wasp$H3K4me3_SC[[1]]"
"2","Warning in .Seqinfo.mergexy(x, y) :"
"2","
 "
"2"," Each of the 2 combined objects has sequence levels not in the other:
  - in 'x': chr4_GL000008v2_random, chr14_KI270725v1_random, chr22_KI270732v1_random, chrUn_KI270754v1, chr3_GL000221v1_random, chr9_KI270719v1_random, chrUn_KI270336v1, chrUn_KI270743v1, chrUn_KI270755v1, chrUn_KI270418v1, chrUn_KI270538v1, chrUn_KI270322v1, chr14_GL000009v2_random, chrUn_KI270748v1, chr17_KI270729v1_random, chrUn_KI270512v1, chrUn_KI270320v1
  - in 'y': chr1_KI270706v1_random
  Make sure to always combine/compare objects based on the same reference
  genome (use suppressWarnings() to suppress this warning).
"
"0","list_peak_H3K4me3$Individual_2_SC <- list_peak_wasp$H3K4me3_SC[[2]]"
"0","list_peak_H3K4me3$Individual_3_SC <- list_peak_wasp$H3K4me3_SC[[3]]"
"0","list_peak_H3K4me3$Individual_4_SC <- list_peak_wasp$H3K4me3_SC[[4]]"
"0","list_peak_H3K4me3$Individual_5_SC <- list_peak_wasp$H3K4me3_SC[[5]]"
"0","list_peak_H3K4me3$Individual_6_SC <- list_peak_wasp$H3K4me3_SC[[6]]"
"0","list_peak_H3K4me3$Individual_7_SC <- list_peak_wasp$H3K4me3_SC[[7]]"
"0","list_peak_H3K4me3$Individual_8_SC <- list_peak_wasp$H3K4me3_SC[[8]]"
"0",""
"0","# Create new combos for all possible individual-celltypes"
"0","# Non-redundant pair combinations"
"0","individual_celltype_combos <- combn(names(list_peak_H3K4me3), 2) %>% t()"
"0",""
"0","# Instantiate dataframes"
"0","cluster_matrix_long_individuals_celltypes <- data.frame()"
"0","cluster_matrix_short_individuals_celltypes <- list()"
"0",""
"0","# Test every combination of individuals for jaccard and build distances into a labelled dataframe"
"0","for (COMBINATION_ROW in 1:nrow(individual_celltype_combos)) {"
"0","  "
"0","  current_frame <- data.frame(sample1 = individual_celltype_combos[COMBINATION_ROW, 1],"
"0","                              sample2 = individual_celltype_combos[COMBINATION_ROW, 2],"
"0","                              jaccard_sim = jaccard_similarity(list_peak_H3K4me3[[individual_celltype_combos[COMBINATION_ROW, 1]]],"
"0","                                                               list_peak_H3K4me3[[individual_celltype_combos[COMBINATION_ROW, 2]]]))"
"0","  "
"0","  cluster_matrix_long_individuals_celltypes <- bind_rows(cluster_matrix_long_individuals_celltypes, current_frame)"
"0","    "
"0","}"
